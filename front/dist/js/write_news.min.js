function News(){}News.prototype.run=function(){var e=this;e.listenQiniuUploadFileEvent(),e.initUEditor(),e.listenSubmitEvent()},News.prototype.listenSubmitEvent=function(){$("#submit-btn").click(function(e){e.preventDefault();var t=$(this).attr("data-news-id"),r=$("input[name='title']").val(),o=$("select[name='category']").val(),n=$("input[name='description']").val(),s=$("input[name='thumbnail']").val(),i=window.ue.getContent(),a="",p="",p=t?(a="/cms/edit_news/","Your article has been edited!"):(a="/cms/write_news/","Your article has been posted!");stajax.post({url:a,data:{title:r,category:o,desc:n,thumbnail:s,content:i,pk:t},success:function(e){200===e.code&&stalert.alertSuccess(p,function(){window.location.reload()})}})})},News.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{serverUrl:"/ueditor/upload/",initialFrameHeight:350,initialFrameWidth:"100%",lang:"en"})},News.prototype.listenUploadEvent=function(){var r=$("#thumbnail-btn");r.change(function(){var e=r[0].files[0],t=new FormData;t.append("file",e),stajax.post({url:"/cms/upload/",data:t,processData:!1,contentType:!1,success:function(e){200===e.code&&$("#thumbnail-form").val(e.data.url)}})})},News.prototype.listenQiniuUploadFileEvent=function(){var i=this;$("#thumbnail-btn").change(function(){var s=this.files[0];stajax.get({url:"/cms/qntoken",success:function(e){var t,r,o,n;200===e.code&&(t=e.data.token,o={fname:r=(new Date).getTime()+"."+s.name.split(".")[1],param:{},mimeType:["image/png"]},n={useCdnDomain:!0,retryCount:6,region:qiniu.region.na0},qiniu.upload(s,r,t,o,n).subscribe({next:i.handleFileUploadProgress,error:i.handleFileUploadError,complete:i.handleFileUploadComplete}))}})})},News.prototype.handleFileUploadProgress=function(e){var t=e.total.percent.toFixed(0)+"%";progressGroup=News.progressGroup,progressBar=News.progressBar,News.progressBar.css({width:"0%"}),News.progressGroup.show(),progressBar.css({width:t}),progressBar.text(t)},News.prototype.handleFileUploadError=function(e){window.messageBox.showError(e.message),progressGroup=News.progressGroup,progressGroup.hide()},News.prototype.handleFileUploadComplete=function(e){progressGroup=News.progressGroup,progressGroup.hide();var t="http://qdh7iftcs.bkt.gdipper.com/"+e.key;News.thumbnailInput.val(t)},$(function(){(new News).run(),News.progressGroup=$("#progress-group"),News.progressBar=$("#progress-bar"),News.thumbnailInput=$("#thumbnail-form")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

function FrontBase(){}function Auth(){var t=this;t.maskWrapper=$(".mask-wrapper"),t.scrollWrapper=$(".scroll-wrapper"),t.emailCaptchaBtn=$(".email-capture-btn")}FrontBase.prototype.run=function(){this.listenAuthBoxHover()},FrontBase.prototype.listenAuthBoxHover=function(){var t=$(".auth-box"),e=$(".user-more-box");t.hover(function(){e.show()},function(){e.hide()})},Auth.prototype.run=function(){var t=this;t.listenClick(),t.listenSwitch(),t.listenSigninEvent(),t.listenImgCaptchaEvent(),t.listenCodeCaptchaEvent(),t.listenSignupEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenClick=function(){var t=this,e=$(".signin-btn"),n=$(".signup-btn"),a=$("#close-btn");e.click(function(){t.showEvent(),t.scrollWrapper.css({left:0})}),n.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),a.click(function(){t.hideEvent()})},Auth.prototype.listenSwitch=function(){var e=this;$(".switch").click(function(){var t=e.scrollWrapper.css("left");(t=parseInt(t))<0?e.scrollWrapper.animate({left:"0"}):e.scrollWrapper.animate({left:"-400px"})})},Auth.prototype.listenSigninEvent=function(){var a=this,t=$(".signin-group"),i=t.find("input[name='email']"),o=t.find("input[name='password']"),r=t.find("input[name='remember']");t.find(".submit-btn").click(function(){var t=i.val(),e=o.val(),n=r.prop("checked");stajax.post({url:"/account/login/",data:{email:t,password:e,remember:n?1:0},success:function(t){200===t.code&&(a.hideEvent(),window.location.reload())}})})},Auth.prototype.listenSignupEvent=function(){var m=this,f=$(".signup-group");f.find(".submit-btn").click(function(t){t.preventDefault();var e=f.find("input[name='email']"),n=f.find("input[name='username']"),a=f.find("input[name='password1']"),i=f.find("input[name='password2']"),o=f.find("input[name='img_capture']"),r=f.find("input[name='email_capture']"),s=e.val(),c=n.val(),u=a.val(),p=i.val(),l=o.val(),h=r.val();stajax.post({url:"/account/register/",data:{email:s,username:c,password1:u,password2:p,img_captcha:l,email_captcha:h},success:function(t){200===t.code&&(m.hideEvent(),window.location.reload())}})})},Auth.prototype.listenImgCaptchaEvent=function(){var t=$("#img_captcha");t.click(function(){t.attr("src","/account/img_captcha/?random="+Math.random())})},Auth.prototype.emailSuccessEvent=function(){var t=this;window.messageBox.showSuccess("Your verification code has been sent."),t.emailCaptchaBtn.addClass("disabled");var e=60;t.emailCaptchaBtn.unbind("click"),timer=setInterval(function(){t.emailCaptchaBtn.text(e+"s"),--e<=0&&(clearInterval(timer),t.emailCaptchaBtn.removeClass("disabled"),t.emailCaptchaBtn.text("Get Code"),t.listenCodeCaptchaEvent())},1e3)},Auth.prototype.listenCodeCaptchaEvent=function(){var e=this,n=$(".signup-group input[name='email']");e.emailCaptchaBtn.click(function(){var t=n.val();t?stajax.get({url:"/account/email_captcha/",data:{email:t},success:function(t){e.emailSuccessEvent()}}):window.messageBox.showError("Please enter your email.")})},$(function(){(new Auth).run()}),$(function(){(new FrontBase).run()}),$(function(){window.template&&(template.defaults.imports.timeSince=function(t){var e=new Date(t).getTime(),n=((new Date).getTime()-e)/1e3;if(n<60)return"just now";if(60<=n&&n<3600)return minutes=parseInt(n/60),minutes+"minutes ago";if(3600<=n&&n<86400)return hours=parseInt(n/60/60),hours+"hours ago";if(86400<=n&&n<2592e3)return days=parseInt(n/60/60/24),days+"days ago";var a=t.getFullYear();return t.getMonth()+"/"+t.getDate()+"/"+a+" "+t.getHours()+":"+t.getMinutes()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
